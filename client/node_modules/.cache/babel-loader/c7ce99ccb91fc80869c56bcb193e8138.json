{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyDIJdpwdIgIPhdh3G-dYXH3sVxRH8uJvuo\",\n  authDomain: \"ecommerce-db-d1465.firebaseapp.com\",\n  databaseURL: \"https://ecommerce-db-d1465.firebaseio.com\",\n  projectId: \"ecommerce-db-d1465\",\n  storageBucket: \"ecommerce-db-d1465.appspot.com\",\n  messagingSenderId: \"340541680777\",\n  appId: \"1:340541680777:web:1cd93794c922b5a84dea58\",\n  measurementId: \"G-6J0HZVCWF5\"\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error\", error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unSubscribe = auth.onAuthStateChanged(userAuth => {\n      unSubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const createCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(object => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, object);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollections = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollections.reduce((acc, collection) => {\n    acc[collection.title.toLowerCase()] = collection;\n    return acc;\n  }, {});\n};\nexport default firebase;","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/e-commerce/client/src/firebase/FireBaseUtils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","firestore","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup","createUserProfileDocument","userAuth","additionalData","userRef","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","getCurrentUser","Promise","resolve","reject","unSubscribe","onAuthStateChanged","createCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","object","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollections","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","acc"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyDIJdpwdIgIPhdh3G-dYXH3sVxRH8uJvuo\",\r\n  authDomain: \"ecommerce-db-d1465.firebaseapp.com\",\r\n  databaseURL: \"https://ecommerce-db-d1465.firebaseio.com\",\r\n  projectId: \"ecommerce-db-d1465\",\r\n  storageBucket: \"ecommerce-db-d1465.appspot.com\",\r\n  messagingSenderId: \"340541680777\",\r\n  appId: \"1:340541680777:web:1cd93794c922b5a84dea58\",\r\n  measurementId: \"G-6J0HZVCWF5\",\r\n};\r\n\r\nfirebase.initializeApp(config);\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\r\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  if (!userAuth) return;\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n  const snapShot = await userRef.get();\r\n  if (!snapShot.exists) {\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date();\r\n    try {\r\n      await userRef.set({ displayName, email, createdAt, ...additionalData });\r\n    } catch (error) {\r\n      console.log(\"error\", error.message);\r\n    }\r\n  }\r\n  return userRef;\r\n};\r\n\r\nexport const getCurrentUser = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const unSubscribe = auth.onAuthStateChanged((userAuth) => {\r\n      unSubscribe();\r\n      resolve(userAuth);\r\n    }, reject);\r\n  });\r\n};\r\n\r\nexport const createCollectionAndDocuments = async (\r\n  collectionKey,\r\n  objectsToAdd\r\n) => {\r\n  const collectionRef = firestore.collection(collectionKey);\r\n  const batch = firestore.batch();\r\n  objectsToAdd.forEach((object) => {\r\n    const newDocRef = collectionRef.doc();\r\n    batch.set(newDocRef, object);\r\n  });\r\n  return await batch.commit();\r\n};\r\n\r\nexport const convertCollectionsSnapshotToMap = (collections) => {\r\n  const transformedCollections = collections.docs.map((doc) => {\r\n    const { title, items } = doc.data();\r\n    return {\r\n      routeName: encodeURI(title.toLowerCase()),\r\n      id: doc.id,\r\n      title,\r\n      items,\r\n    };\r\n  });\r\n  return transformedCollections.reduce((acc, collection) => {\r\n    acc[collection.title.toLowerCase()] = collection;\r\n    return acc;\r\n  }, {});\r\n};\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}